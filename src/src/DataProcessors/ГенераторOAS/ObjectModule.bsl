#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем Схема; // см. КорневаяСхема
Перем ТекущийШаблонURL; // см. НовыйОписаниеШаблонаURL
Перем ТекущийМетодURL; // см. НовыйБлокМетода
Перем ТекущийКомпонент; // см. НовыйБлокКомпонента
Перем ТекущийБлокПараметров; // Массив
Перем ДоступныеТипы Экспорт; // см. ДоступныеТипы
#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ДобавитьИнфо(Заголовок, Версия, Описание = Неопределено) Экспорт	
	Схема.info = РазделИнфо(Заголовок, Версия, Описание);
	Возврат ЭтотОбъект;
КонецФункции

Функция ДобавитьЛицензию(ИмяЛицензии, URLЛицензии = Неопределено) Экспорт
	БлокЛицензии = НовыйБлокЛицензии(ИмяЛицензии, URLЛицензии);
	Схема.info.Вставить("license", БлокЛицензии);
	Возврат ЭтотОбъект;
КонецФункции

Функция ДобавитьКонтакт(ИмяКонтакта = Неопределено, URL = Неопределено, ПочтовыйАдрес = Неопределено) Экспорт
	
	БлокКонтакт = НовыйБлокКонтактов();
	
	Если ИмяКонтакта <> Неопределено Тогда
		БлокКонтакт.name = ИмяКонтакта;
	Иначе
		БлокКонтакт.Удалить("name");
	КонецЕсли;

	Если URL <> Неопределено Тогда
		БлокКонтакт.url = URL;
	Иначе
		БлокКонтакт.Удалить("url");
	КонецЕсли;

	Если ПочтовыйАдрес <> Неопределено Тогда
		БлокКонтакт.email = ПочтовыйАдрес;
	Иначе
		БлокКонтакт.Удалить("email");
	КонецЕсли;
	
	Схема.info.Вставить("contact", БлокКонтакт);
	Возврат ЭтотОбъект;

КонецФункции

Функция ДобавитьСервер(Адрес, Описание = Неопределено) Экспорт
	ИнфоСервера = НовыйСервер(Адрес, Описание);
	Схема.servers.Добавить(ИнфоСервера);
	Возврат ЭтотОбъект;
КонецФункции

Функция ДобавитьТег(ИмяТега, Описание = Неопределено) Экспорт
	Тег = НовыйТэг(ИмяТега, Описание);
	Схема.tags.Добавить(Тег);
	Возврат ЭтотОбъект;
КонецФункции

Функция ДобавитьПуть(Путь, КраткоеОписание = Неопределено, ПолноеОписание = Неопределено) Экспорт
	ОписаниеПути = НовыйОписаниеШаблонаURL();
	
	Если КраткоеОписание <> Неопределено Тогда
		ОписаниеПути.summary = КраткоеОписание;
	Иначе
		ОписаниеПути.Удалить("summary");
	КонецЕсли;
	
	Если ПолноеОписание <> Неопределено Тогда
		ОписаниеПути.description = ПолноеОписание;
	Иначе
		ОписаниеПути.Удалить("description");
	КонецЕсли;
	
	Схема.paths.Вставить(Путь, ОписаниеПути);
	ТекущийШаблонURL = Схема.paths.Получить(Путь);
	ТекущийБлокПараметров = ТекущийШаблонURL.parameters;
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ДобавитьМетод(ИмяМетода, КраткоеОписание = Неопределено, ПолноеОписание = Неопределено) Экспорт
	БлокМетода = НовыйБлокМетода();
	
	Если КраткоеОписание <> Неопределено Тогда
		БлокМетода.summary = КраткоеОписание;
	Иначе
		БлокМетода.Удалить("summary");
	КонецЕсли;
	
	Если ПолноеОписание <> Неопределено Тогда
		БлокМетода.description = ПолноеОписание;
	Иначе
		БлокМетода.Удалить("description");
	КонецЕсли;
	
	ТекущийШаблонURL.Вставить(ИмяМетода, БлокМетода);
	ТекущийМетодURL = ТекущийШаблонURL[ИмяМетода];
	ТекущийБлокПараметров = ТекущийМетодURL.parameters;
	Возврат ЭтотОбъект;
КонецФункции

Функция ПолучитьСхему() Экспорт
	Возврат КоннекторХТТПСлужебный.ОбъектВJson(Схема);
КонецФункции

// Добавить параметр.
// 
// Параметры:
//  ИмяПараметра - Строка
//  Локация - Строка
//  Обязательный - Булево
//  Тип - см. ОписаниеТипа
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ГенераторOAS - Добавить параметр
Функция ДобавитьПараметр(ИмяПараметра, Локация, Обязательный, Тип = Неопределено) Экспорт
	Параметр = НовыйБлокПараметраМетода();
	Параметр.name = ИмяПараметра;
	Параметр.in = Локация;
	Параметр.required = Обязательный;
	
	Если Тип = Неопределено Тогда
		Параметр.Удалить("schema");
	Иначе
		Параметр.schema = Тип;
	КонецЕсли;
	
	ТекущийБлокПараметров.Добавить(Параметр);
	
	Возврат ЭтотОбъект;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Корневая схема.
// 
// Возвращаемое значение:
//  Структура - Корневая схема:
// * openapi - Строка
// * info - Структура 
// * servers - Массив из см. НовыйСервер
// * paths - Соответствие из КлючИЗначение:
// 	** Ключ - Строка
// 	** Значение - см. НовыйБлокМетода
// * components - Структура из см. НовыйБлокКомпонента
// * tags - Массив из см. НовыйТэг
Функция КорневаяСхема()
	
	Результат = Новый Структура();
	Результат.Вставить("openapi", "3.0.0");
	Результат.Вставить("info", Новый Структура());
	Результат.Вставить("servers", Новый Массив());
	Результат.Вставить("paths", Новый Соответствие());
	Результат.Вставить("components", Новый Структура());
	Результат.Вставить("tags", Новый Массив());
	Возврат Результат;
	
КонецФункции

// Раздел инфо.
// 
// Параметры:
//  Заголовок - Строка
//  Версия - Строка
//  Лицензия - см. НовыйБлокЛицензии
//  Контакты - см. НовыйБлокКонтактов
//  Описание - Строка
// 
// Возвращаемое значение:
//  Структура - Раздел инфо:
// * title - Строка
// * version - Строка
// * description - Строка
// * termsOfService - Строка
// * contact - см. НовыйБлокКонтактов 
// * license - см. НовыйБлокЛицензии
Функция РазделИнфо(Заголовок, Версия, Описание = Неопределено)
	
	Результат = Новый Структура();
	Результат.Вставить("title", Заголовок);
	Результат.Вставить("version", Версия);	
	Результат.Вставить("description", ?(ЗначениеЗаполнено(Описание), Описание, ""));
	Результат.Вставить("termsOfService", "");
	
	Возврат Результат;
	
КонецФункции

// Новый блок контактов.
// 
// Возвращаемое значение:
//  Структура - Новый блок контактов:
// * name - Строка
// * url - Строка
// * email - Строка
Функция НовыйБлокКонтактов()

	Результат = Новый Структура;

	Результат.Вставить("name", "");
	Результат.Вставить("url", "");
	Результат.Вставить("email", "");

	Возврат Результат;
	
КонецФункции

// Новый элемент сервер.
// 
// Параметры:
//  Адрес - Строка - URI адреса сервера
//  Описание - Строка - Описание
// 
// Возвращаемое значение:
//  Структура - Новый элемент сервер:
// * url - Строка
// * description - Строка
Функция НовыйСервер(Адрес, Описание)

	Результат = Новый Структура;

	Результат.Вставить("url", Адрес);
	Результат.Вставить("description", ?(ЗначениеЗаполнено(Описание), Описание, ""));

	Возврат Результат;
	
КонецФункции

// Описывает блок лицензии
// 
// Параметры:
//  ИмяЛицензии - Строка -
//  АдресЛицензии - Строка - Адрес лицензии
// 
// Возвращаемое значение:
//  Структура - Новый блок лицензии:
// * name - Строка
// * url - Строка
Функция НовыйБлокЛицензии(ИмяЛицензии, АдресЛицензии)

	Результат = Новый Структура;
	Результат.Вставить("name", ИмяЛицензии);
	Результат.Вставить("url", ?(ЗначениеЗаполнено(АдресЛицензии), АдресЛицензии, ""));
	Возврат Результат;
	
КонецФункции

// Описывает блок данных тэга
// 
// Параметры:
//  ИмяТега - Строка
//  Описание - Строка
// 
// Возвращаемое значение:
//  Структура - Новый тэг:
// * name - Строка
// * description - Строка
Функция НовыйТэг(ИмяТега, Описание)

	Результат = Новый Структура;
	Результат.Вставить("name", ИмяТега);
	Результат.Вставить("description", ?(ЗначениеЗаполнено(Описание), Описание, ""));
	Возврат Результат;
	
КонецФункции

// Новый описание шаблона URL.
// 
// Возвращаемое значение:
//  Структура - Новый описание шаблона URL:
// * summary - Строка
// * description - Строка
// * parameters - Массив из см. НовыйБлокПараметраМетода
Функция НовыйОписаниеШаблонаURL()

	Результат = Новый Структура;

	Результат.Вставить("summary", "");
	Результат.Вставить("description", "");
	Результат.Вставить("parameters", Новый Массив);

	Возврат Результат;
	
КонецФункции


// Новый блок метода.
// 
// Возвращаемое значение:
//  Структура - Новый блок метода:
// * tags - Массив из Строка
// * summary - Строка
// * requestBody - см. новый
// * description - Строка
// * parameters - Массив из см. НовыйБлокПараметраМетода
// * deprecated - Булево
// * responses - Соответствие -
Функция НовыйБлокМетода()

	Результат = Новый Структура;

	Результат.Вставить("tags", Новый Массив);
	Результат.Вставить("summary");
//	Результат.Вставить("requestBody");
	Результат.Вставить("description");
	Результат.Вставить("parameters", Новый Массив);
	Результат.Вставить("deprecated", Ложь);
	Результат.Вставить("responses", Новый Соответствие);

	Возврат Результат;
	
КонецФункции

// Новый блок параметра метода.
// 
// Возвращаемое значение:
//  Структура - Новый блок параметра метода:
// * name - Строка
// * in - Строка
// * required - Булево
// * schema - Неопределено
Функция НовыйБлокПараметраМетода()

	Результат = Новый Структура;

	Результат.Вставить("name");
	Результат.Вставить("in");
//	Результат.Вставить("description");
	Результат.Вставить("required");
	Результат.Вставить("schema");

	Возврат Результат;
	
КонецФункции

// Описывает блок ссылки на документацию
// 
// Параметры:
//  URL - Строка
//  Описание - Строка
// 
// Возвращаемое значение:
//  Структура - Новый блок ссылки на документацию:
// * url - Строка
// * description - Строка
Функция НовыйБлокСсылкиНаДокументацию(URL, Описание = Неопределено)

	Результат = Новый Структура;
	Результат.Вставить("url", URL);
	Результат.Вставить("description", ?(ЗначениеЗаполнено(Описание), Описание, ""));
	Возврат Результат;
	
КонецФункции

// Описывает блок определений
//
// Возвращаемое значение:
//   Структура   - структура данных
//
Функция НовыйБлокКомпонента()

	Результат = Новый Структура;

	Результат.Вставить("type");
	Результат.Вставить("properties");

	Возврат Результат;
	
КонецФункции

// Описывает блок свойства типа
//
// Возвращаемое значение:
//   Структура   - структура данных
//
Функция НовыйБлокСвойстваТипа()
	
	Результат = Новый Структура;

	Результат.Вставить("type");
	Результат.Вставить("format");
	Результат.Вставить("description");
	Результат.Вставить("items");

	Возврат Результат;

КонецФункции

// Описывает блок ответа
//
// Возвращаемое значение:
//   Структура   - структура данных
//
Функция НовыйБлокОтвета()
	
	Результат = Новый Структура;

	Результат.Вставить("description");
	Результат.Вставить("content");

	Возврат Результат;

КонецФункции

Функция НовыйБлокКонтента()
	Результат = Новый Структура();
	Результат.Вставить("schema");
КонецФункции

// Описывает указатель на тип
//
// Параметры:
//  Тип - Строка - тип данных
//  ЭтоМассив - Булево - признак массива
//
// Возвращаемое значение:
//   Соответствие   - указатель
//
Функция НовыйУказательНаТип(Тип, ЭтоМассив = Ложь)
	
	Результат = Новый Соответствие;

	Если ЭтоМассив Тогда
		ОписаниеМассива = Новый Соответствие;
		ОписаниеМассива.Вставить("$ref", СтрШаблон("#/components/schemas/%1", Тип));
		Результат.Вставить("items", ОписаниеМассива);
		Результат.Вставить("type", "array");
	Иначе
		Результат.Вставить("$ref", СтрШаблон("#/components/schemas/%1", Тип));
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Доступные типы.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура - Доступные типы:
// * ЧИСЛО - см. ОписаниеТипа
// * БУЛЕВО - см. ОписаниеТипа
// * ДАТА - см. ОписаниеТипа
// * ДАТА_ВРЕМЯ - см. ОписаниеТипа
// * ИД - см. ОписаниеТипа
// * СТРОКА - см. ОписаниеТипа
Функция ДоступныеТипы()
	Результат = Новый Структура();
	Результат.Вставить("ЧИСЛО", ОписаниеТипа("number", ""));
	Результат.Вставить("БУЛЕВО", ОписаниеТипа("boolean", ""));
	Результат.Вставить("ДАТА", ОписаниеТипа("string", "date"));
	Результат.Вставить("ДАТА_ВРЕМЯ", ОписаниеТипа("string", "date-time"));
	Результат.Вставить("ИД", ОписаниеТипа("string", "uuid"));
	Результат.Вставить("СТРОКА", ОписаниеТипа("string", ""));
	Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции

// Описание типа.
// 
// Параметры:
//  Тип - Строка
//  Формат - Строка
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура - Описание типа:
// * type - Строка 
// * format - Строка
Функция ОписаниеТипа(Тип, Формат)
	Результат = Новый Структура("type,format", Тип, Формат);
	Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции

#КонецОбласти

#Область Инициализация

Схема = КорневаяСхема();
ДоступныеТипы = ДоступныеТипы();

#КонецОбласти

#КонецЕсли
