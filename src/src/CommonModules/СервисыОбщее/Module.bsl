// @strict-types

#Область ПрограммныйИнтерфейс

// Извлечь тело запроса по указанной схеме
// 
// Параметры:
//  Запрос - HTTPСервисЗапрос - Запрос хттп
//  ТипXDTO - ТипОбъектаXDTO,ТипЗначенияXDTO - Запрос хттп
//  ДопПараметры - Неопределено, Структура - Доп параметры (Параметры прокидываются во всех переопределяемые процедуры)
//  Кодировка - Строка,КодировкаТекста - Кодировка считывания тела запроса
// 
// Возвращаемое значение:
//  ОбъектXDTO,СписокXDTO
Функция ИзвлечьТелоJSONПоСхеме(Запрос, ТипXDTO, ДопПараметры = Неопределено, Кодировка = Неопределено) Экспорт
	ЧтениеJson = Новый ЧтениеJSON();
	Поток = Запрос.ПолучитьТелоКакПоток();
	Если Поток.Размер() = 0 Тогда
		ВызватьИсключениеПроверки("body is empty");
	КонецЕсли;
	ЧтениеJson.ОткрытьПоток(Поток, Кодировка);
	
	Попытка
		//@skip-check invocation-parameter-type-intersect
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(
			ЧтениеJSON,
			ТипXDTO,
			"ВосстановитьЗначениеXDTO", // Можно переопределить в см. ВосстановлениеXDTOПереопределяемый 
			ВосстановлениеXDTO,
			ДопПараметры
		); // ОбъектXDTO, СписокXDTO
	Исключение
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключениеПроверки(ТекстОшибки);
	КонецПопытки;
	
	Возврат ОбъектXDTO;
	
КонецФункции

// Извлекает параметры из запроса, проверяет наличие обязательных параметров, преобразует
// параметры запроса в примитивные типы, переименовывает параметры в локальное представление
// 
// Параметры:
//  Запрос - HTTPСервисЗапрос
//  ПроверяемыеПараметры - Массив из см. НовыйПараметрЗапроса
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Параметры запроса:
//	* Ключ - Строка
//	* Значение - Строка,Булево,Число
Функция ПараметрыЗапроса(Запрос, ПроверяемыеПараметры) Экспорт
	
	ПараметрыЗапроса = Новый Соответствие();
	
	Для Каждого Элемент Из Запрос.ПараметрыЗапроса Цикл
		ПараметрыЗапроса.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Для Каждого Элемент Из Запрос.ПараметрыURL Цикл
		ПараметрыЗапроса.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Для Каждого ЗапрашиваемыйПараметр Из ПроверяемыеПараметры Цикл
		Если ЗапрашиваемыйПараметр.Обязательный И ПараметрыЗапроса.Получить(ЗапрашиваемыйПараметр.Имя) = Неопределено Тогда
			ВызватьИсключениеПроверки(СтрШаблон("No required parameter [%1]", ЗапрашиваемыйПараметр.Имя));
		КонецЕсли;
		
		Если ПараметрыЗапроса.Получить(ЗапрашиваемыйПараметр.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПараметра = ПараметрыЗапроса.Получить(ЗапрашиваемыйПараметр.Имя); // Строка
		
		Если ЗапрашиваемыйПараметр.ВозможныеЗначения.Количество() > 0
			И ЗапрашиваемыйПараметр.ВозможныеЗначения.Найти(НРег(ЗначениеПараметра)) = Неопределено Тогда
				ТекстОшибки = СтрШаблон(
					"Invalid parameter value for parameter [%1], only following values are available [%2]",
					ЗапрашиваемыйПараметр.Имя,
					СтрСоединить(ЗапрашиваемыйПараметр.ВозможныеЗначения, ",")
				);
				ВызватьИсключениеПроверки(ТекстОшибки);
		КонецЕсли;
		
		Тип = ВРЕГ(ЗапрашиваемыйПараметр.Тип);
		Если Тип = "БУЛЕВО" Тогда
			Попытка
				ЗначениеБулево = Булево(ЗначениеПараметра);
				ПараметрыЗапроса.Вставить(ЗапрашиваемыйПараметр.Имя, ЗначениеБулево);
			Исключение
				ВызватьИсключениеПроверки(СтрШаблон("failed to convert value [%1] to boolean", ЗначениеПараметра));
			КонецПопытки;
		ИначеЕсли Тип = "ЧИСЛО" Тогда
			Попытка
				ЗначениеЧислом = Число(ЗначениеПараметра);
				ПараметрыЗапроса.Вставить(ЗапрашиваемыйПараметр.Имя, ЗначениеЧислом);
			Исключение
				ВызватьИсключениеПроверки(СтрШаблон("failed to convert value [%1] to number", ЗначениеПараметра));
			КонецПопытки;
		ИначеЕсли Тип = "ИД" Тогда
			Попытка
				ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("https://github.com/Daabramov/1c-http-framework", "guid"), ЗначениеПараметра);
				ПараметрыЗапроса.Вставить(ЗапрашиваемыйПараметр.Имя, ЗначениеПараметра);
			Исключение
				ВызватьИсключениеПроверки(СтрШаблон("value [%1] is not guid", ЗначениеПараметра));
			КонецПопытки;
		ИначеЕсли Тип = "СТРОКА" Тогда
			Продолжить;
		Иначе
			ВызватьИсключение СтрШаблон("Неподдерживаемый тип параметра %1 для %2", Тип, ЗапрашиваемыйПараметр.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Новый параметр запроса.
// 
// Параметры:
//  Имя - Строка - Имя
//  Тип - Строка - Описание типа строкой (Число,Строка,Булево,Ид)
//  Обязательный - Булево - Признак обязательности параметра
// 
// Возвращаемое значение:
//  Структура - Новый параметр запроса:
// * Имя - Строка
// * Обязательный - Булево
// * Тип - Строка - Тип строкой "Число", "Строка", "Булево" или "Ид"
// * ВозможныеЗначения - Массив из Строка - возможные значения строк указывать в нижнем регистре
Функция НовыйПараметрЗапроса(Имя, Тип = "Строка", Обязательный = Ложь) Экспорт
	
	Параметр = Новый Структура();
	Параметр.Вставить("Имя", Имя);
	Параметр.Вставить("Обязательный", Обязательный);
	Параметр.Вставить("Тип", Тип);
	Параметр.Вставить("ВозможныеЗначения", Новый Массив());
	
	Возврат Параметр;
	
КонецФункции

// Ответ из объекта.
// 
// Параметры:
//  Объект - Структура,Соответствие,Массив,ФиксированнаяКоллекция
//  Код - Число - Код
//  ДопПараметры - Структура:
//  * ПараметрыПреобразованияJson - см. КоннекторХТТПСлужебный.ПараметрыПреобразованияJSONПоУмолчанию
//  * ПараметрыЗаписиJson - см. КоннекторХТТПСлужебный.ПараметрыЗаписиJSONПоУмолчанию
// 
// Возвращаемое значение:
//  HTTPСервисОтвет - Ответ из объекта
Функция ОтветИзОбъекта(Объект, Код = 200, ДопПараметры = Неопределено) Экспорт
	//@skip-check invocation-parameter-type-intersect
	СтрокаJson = КоннекторХТТПСлужебный.ОбъектВJson(
		Объект,
		ОбщегоНазначенияХТТП.ЗначениеПоКлючу(ДопПараметры, "ПараметрыПреобразованияJson"),
		ОбщегоНазначенияХТТП.ЗначениеПоКлючу(ДопПараметры, "ПараметрыЗаписиJson")
	);
	Ответ = ОтветИзСтроки(СтрокаJson, Код);
	Ответ.Заголовки.Вставить("Content-Type", "application/json");
	Возврат Ответ;
КонецФункции

// Ответ из строки.
// 
// Параметры:
//  ТелоОтвета - Строка - Тело ответа
//  Код - Число - Код
// 
// Возвращаемое значение:
//  HTTPСервисОтвет - Ответ из строка
Функция ОтветИзСтроки(ТелоОтвета, Код = 200) Экспорт
	Ответ = ОтветПоКоду(Код);
	Ответ.УстановитьТелоИзСтроки(ТелоОтвета);
	Возврат Ответ;
КонецФункции

// Ответ из двоичных данных.
// 
// Параметры:
//  Данные - ДвоичныеДанные - Данные
//  Код - Число - Код
// 
// Возвращаемое значение:
//  HTTPСервисОтвет - Ответ из двоичных данных
Функция ОтветИзДвоичныхДанных(Данные, Код = 200) Экспорт
	Ответ = ОтветПоКоду(Код);
	Ответ.УстановитьТелоИзДвоичныхДанных(Данные);
	Ответ.Заголовки.Вставить("Content-Type", "application/octet-stream");
	Возврат Ответ;
КонецФункции

// Ответ по коду.
// 
// Параметры:
//  Код - Число - Код
// 
// Возвращаемое значение:
//  HTTPСервисОтвет - Ответ по коду
Функция ОтветПоКоду(Код = 200) Экспорт
	Ответ = Новый HTTPСервисОтвет(Код);
	Возврат Ответ;
КонецФункции

// Плохой запрос (400).
// 
// Параметры:
//  Сообщение - Строка - Тест ошибки проверки
//  Код - Число - Код ХТТП ответа
// 
// Возвращаемое значение:
//  HTTPСервисОтвет - Новый плохой запрос
Функция ПлохойЗапрос(Сообщение, Код = 400) Экспорт
	
	ОписаниеПроблемы = Новый Структура(
		"error",
		СтрЗаменить(Сообщение, ОбработкаЗапросовПовтИсп.БазовыйКодОшибкиПроверки(), "")
	);
	Возврат ОтветИзОбъекта(ОписаниеПроблемы, Код);
	
КонецФункции

// Ошибка Сервиса (500).
// 
// Параметры:
//  Сообщение - Строка - Тест ошибки проверки
//  ИдентификатораОшибки - Строка - Идентификатор ошибки
//  Код - Число - Код ХТТП ответа
// 
// Возвращаемое значение:
//  HTTPСервисОтвет - Новый плохой запрос
Функция ОшибкаСервера(Сообщение, ИдентификатораОшибки, Код = 500) Экспорт
	ОписаниеОшибки = Новый Структура("trace_code", ИдентификатораОшибки);
	Если ЗначениеЗаполнено(Сообщение) Тогда
		ОписаниеОшибки.Вставить("error", Сообщение);
	КонецЕсли;
	Возврат ОтветИзОбъекта(ОписаниеОшибки, Код);
КонецФункции

// Вызвать исключение проверки.
// 
// Параметры:
//  Сообщение - Строка - Передаваемое сообщение ошибки проверки
Процедура ВызватьИсключениеПроверки(Сообщение) Экспорт
	ВызватьИсключение СтрШаблон(
		"%1%2",
		ОбработкаЗапросовПовтИсп.БазовыйКодОшибкиПроверки(),
		Сообщение
	);
КонецПроцедуры

#КонецОбласти
