// @strict-types

#Область ПрограммныйИнтерфейс

// Извлечь тело запроса по указанной схеме
// 
// Параметры:
//  Запрос - HTTPСервисЗапрос - Запрос хттп
//  ТипXDTO - ТипОбъектаXDTO,ТипЗначенияXDTO - Запрос хттп
//  ДопПараметры - Неопределено, Структура - Доп параметры (Параметры прокидываются во всех переопределяемые процедуры)
//  Кодировка - Строка,КодировкаТекста - Кодировка считывания тела запроса
// 
// Возвращаемое значение:
//  ОбъектXDTO,СписокXDTO
Функция ИзвлечьТелоJSONПоСхеме(Запрос, ТипXDTO, ДопПараметры = Неопределено, Кодировка = Неопределено) Экспорт
	ЧтениеJson = Новый ЧтениеJSON();
	Поток = Запрос.ПолучитьТелоКакПоток();
	Если Поток.Размер() = 0 Тогда
		ВызватьИсключениеПроверки("body is empty");
	КонецЕсли;
	ЧтениеJson.ОткрытьПоток(Поток, Кодировка);
	
	Попытка
		//@skip-check invocation-parameter-type-intersect
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(
			ЧтениеJSON,
			ТипXDTO,
			"ВосстановитьЗначениеXDTO", // Можно переопределить в см. ВосстановлениеXDTOПереопределяемый 
			ВосстановлениеXDTO,
			ДопПараметры
		); // ОбъектXDTO, СписокXDTO
	Исключение
		ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключениеПроверки(ТекстОшибки);
	КонецПопытки;
	
	Возврат ОбъектXDTO;
	
КонецФункции

// Параметры запроса.
// 
// Параметры:
//  Запрос - HTTPЗапрос
//  ПолучаемыеПараметры - Массив
//  ДопПараметры - Неопределено - Доп параметры
// 
// Возвращаемое значение:
//  
Функция ПараметрыЗапроса(Запрос, ПолучаемыеПараметры, ДопПараметры = Неопределено) Экспорт
	
КонецФункции

Функция НовыйПолучаемыйПараметр() Экспорт
	
КонецФункции

// Ответ из объекта.
// 
// Параметры:
//  Объект - Структура,Соответствие,Массив,ФиксированнаяКоллекция
//  Код - Число - Код
//  ДопПараметры - Структура:
//  * ПараметрыПреобразованияJson - см. КоннекторХТТПСлужебный.ПараметрыПреобразованияJSONПоУмолчанию
//  * ПараметрыЗаписиJson - см. КоннекторХТТПСлужебный.ПараметрыЗаписиJSONПоУмолчанию
// 
// Возвращаемое значение:
//  HTTPСервисОтвет - Ответ из объекта
Функция ОтветИзОбъекта(Объект, Код = 200, ДопПараметры = Неопределено) Экспорт
	//@skip-check invocation-parameter-type-intersect
	СтрокаJson = КоннекторХТТПСлужебный.ОбъектВJson(
		Объект,
		ОбщегоНазначенияХТТП.ЗначениеПоКлючу(ДопПараметры, "ПараметрыПреобразованияJson"),
		ОбщегоНазначенияХТТП.ЗначениеПоКлючу(ДопПараметры, "ПараметрыЗаписиJson")
	);
	Ответ = ОтветИзСтроки(СтрокаJson, Код);
	Ответ.Заголовки.Вставить("Content-Type", "application/json");
	Возврат Ответ;
КонецФункции

// Ответ из строки.
// 
// Параметры:
//  ТелоОтвета - Строка - Тело ответа
//  Код - Число - Код
// 
// Возвращаемое значение:
//  HTTPСервисОтвет - Ответ из строка
Функция ОтветИзСтроки(ТелоОтвета, Код = 200) Экспорт
	Ответ = ОтветПоКоду(Код);
	Ответ.УстановитьТелоИзСтроки(ТелоОтвета);
	Возврат Ответ;
КонецФункции

// Ответ из двоичных данных.
// 
// Параметры:
//  Данные - ДвоичныеДанные - Данные
//  Код - Число - Код
// 
// Возвращаемое значение:
//  HTTPСервисОтвет - Ответ из двоичных данных
Функция ОтветИзДвоичныхДанных(Данные, Код = 200) Экспорт
	Ответ = ОтветПоКоду(Код);
	Ответ.УстановитьТелоИзДвоичныхДанных(Данные);
	Ответ.Заголовки.Вставить("Content-Type", "application/octet-stream");
	Возврат Ответ;
КонецФункции

// Ответ по коду.
// 
// Параметры:
//  Код - Число - Код
// 
// Возвращаемое значение:
//  HTTPСервисОтвет - Ответ по коду
Функция ОтветПоКоду(Код = 200) Экспорт
	Ответ = Новый HTTPСервисОтвет(Код);
	Возврат Ответ;
КонецФункции

// Плохой запрос (400).
// 
// Параметры:
//  Сообщение - Строка - Тест ошибки проверки
//  Код - Число - Код ХТТП ответа
// 
// Возвращаемое значение:
//  HTTPСервисОтвет - Новый плохой запрос
Функция ПлохойЗапрос(Сообщение, Код = 400) Экспорт
	
	ОписаниеПроблемы = Новый Структура(
		"error",
		СтрЗаменить(Сообщение, ОбработкаЗапросовПовтИсп.БазовыйКодОшибкиПроверки(), "")
	);
	Возврат ОтветИзОбъекта(ОписаниеПроблемы, Код);
	
КонецФункции

// Ошибка Сервиса (500).
// 
// Параметры:
//  Сообщение - Строка - Тест ошибки проверки
//  ИдентификатораОшибки - Строка - Идентификатор ошибки
//  Код - Число - Код ХТТП ответа
// 
// Возвращаемое значение:
//  HTTPСервисОтвет - Новый плохой запрос
Функция ОшибкаСервера(Сообщение, ИдентификатораОшибки, Код = 500) Экспорт
	ОписаниеОшибки = Новый Структура("trace_code", ИдентификатораОшибки);
	Если ЗначениеЗаполнено(Сообщение) Тогда
		ОписаниеОшибки.Вставить("error", Сообщение);
	КонецЕсли;
	Возврат ОтветИзОбъекта(ОписаниеОшибки, Код);
КонецФункции

// Вызвать исключение проверки.
// 
// Параметры:
//  Сообщение - Строка - Передаваемое сообщение ошибки проверки
Процедура ВызватьИсключениеПроверки(Сообщение) Экспорт
	ВызватьИсключение СтрШаблон(
		"%1%2",
		ОбработкаЗапросовПовтИсп.БазовыйКодОшибкиПроверки(),
		Сообщение
	);
КонецПроцедуры

#КонецОбласти
