// @strict-types

#Область ПрограммныйИнтерфейс

// Обработать запрос.
// 
// Параметры:
//  Запрос - HTTPСервисЗапрос - Запрос
//  МетодОбработчик - Строка -  Имя экспортного метода обработчика. Параметры: Запрос, МетаданныеСервиса. Возвращает HTTPСервисОтвет
//  МетаданныеСервиса - ОбъектМетаданныхHTTPСервис - Метаданные ХТТП сервиса 
//  УстанавливатьТранзакцию - Булево -  указывает требуется ли устанавливать верхнеуровневую транзакцию
// 
// Возвращаемое значение:
// HTTPСервисОтвет - Ответ
Функция ОбработатьЗапрос(Запрос, МетодОбработчик, МетаданныеСервиса, УстанавливатьТранзакцию = Ложь) Экспорт
	
	Если УстанавливатьТранзакцию Тогда
		НачатьТранзакцию();	
	КонецЕсли;
	
	Попытка
		
		Результат = Вычислить(МетодОбработчик + "(Запрос, МетаданныеСервиса)"); // HTTPСервисОтвет
		
		Если УстанавливатьТранзакцию Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если УстанавливатьТранзакцию Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Возврат ОбработатьИсключениеВызова(Запрос, МетаданныеСервиса, ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбработатьИсключениеВызова(Запрос, МетаданныеСервиса, ИнформацияОбОшибке)
	
	ПростойТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);

	Если СтрНайти(ПростойТекстОшибки, ОбработкаЗапросовПовтИсп.БазовыйКодОшибкиПроверки()) Тогда
		Возврат СервисыОбщее.ПлохойЗапрос(ПростойТекстОшибки);
	КонецЕсли;

	ПодробныйТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	
	ИдентификаторОшибки = ЗарегистрироватьОшибку(Запрос, МетаданныеСервиса, ИнформацияОбОшибке);
	
	ИтоговыйТекстОшибки = ?(
		ОбработкаЗапросовПовтИсп.ВыводитьПодробноеОписаниеОшибок(),
		ПодробныйТекстОшибки,
		""
	);
	
	Возврат СервисыОбщее.ОшибкаСервера(ИтоговыйТекстОшибки, ИдентификаторОшибки);
	
КонецФункции

Функция ЗарегистрироватьОшибку(Запрос, МетаданныеСервиса, ИнформацияОбОшибке)
	
	ИдентификаторОшибки = ВРег(ОбщегоНазначенияХТТП.КонтрольнаяСуммаСтрокой(Новый УникальныйИдентификатор()));
	
	ИмяСобытия = СтрШаблон(
		"%1.%2.%3.%4",
		ОбработкаЗапросовПовтИсп.БазовыйКодЖурналаРегистрации(),
		МетаданныеСервиса.КорневойURL,
		СтрСоединить(СтрРазделить(Запрос.ОтносительныйURL, "/", Ложь), "."),
		Запрос.HTTPМетод
	);
	
	ТекстОшибки = СформироватьТекстОшибки(Запрос, ИнформацияОбОшибке);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		МетаданныеСервиса,
		ИдентификаторОшибки,
		ТекстОшибки
	);
	
	Возврат ИдентификаторОшибки;
	
КонецФункции

Функция СформироватьТекстОшибки(Запрос, ИнформацияОбОшибке)
	
	ДанныеОшибки = Новый Соответствие();
	ДанныеОшибки.Вставить("ТекстОшибки", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
	ДанныеОшибки.Вставить("Заголовки", Новый Соответствие());
	ОбщегоНазначенияХТТП.ДополнитьСоответствие(ДанныеОшибки.Получить("Заголовки"), Запрос.Заголовки);
	ДанныеОшибки.Получить("Заголовки").Удалить("Authorization");
	
	ДанныеОшибки.Вставить("ПараметрыURL", Новый Соответствие());
	ОбщегоНазначенияХТТП.ДополнитьСоответствие(ДанныеОшибки.Получить("ПараметрыURL"), Запрос.ПараметрыURL);
	
	ДанныеОшибки.Вставить("ПараметрыЗапроса", Новый Соответствие());
	ОбщегоНазначенияХТТП.ДополнитьСоответствие(ДанныеОшибки.Получить("ПараметрыЗапроса"), Запрос.ПараметрыЗапроса);
	
	РазмерТела = Запрос.ПолучитьТелоКакПоток().Размер();
	Если РазмерТела < ОбработкаЗапросовПовтИсп.МаксимальныйРазмерТелаДляЛогирования() Тогда 
		ДанныеОшибки.Вставить("ТелоЗапроса", Base64Строка(Запрос.ПолучитьТелоКакДвоичныеДанные()));
	Иначе
		ДанныеОшибки.Вставить("ПревышенЛимит", Истина);
		ДанныеОшибки.Вставить("ИсходныйРазмер", РазмерТела);
	КонецЕсли;
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеОшибки);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти
